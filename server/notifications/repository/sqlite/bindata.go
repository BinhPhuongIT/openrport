// Code generated by go-bindata.
// sources:
// 001_init.down.sql
// 001_init.up.sql
// DO NOT EDIT!

package sqlite

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\xcb\x2f\xc9\x4c\xcb\x4c\x4e\x2c\xc9\xcc\xcf\x2b\x8e\xcf\xc9\x4f\xb7\x06\x04\x00\x00\xff\xff\x5d\x68\xf4\x86\x1d\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 29, mode: os.FileMode(436), modTime: time.Unix(1687534397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x4f\xdc\x40\x0c\xbd\xe7\x57\xb8\x5c\x20\xd2\x6c\x85\x90\xe0\x82\x7a\x48\x97\x54\xa0\x2e\x0b\x5a\x42\xc5\x2d\x9a\xcd\x38\x9b\x29\xc9\x4c\xea\x71\x80\xf4\xd7\x57\x33\xc9\x7e\x82\x84\xba\xb7\xf5\xb3\xdf\x1b\x3f\xdb\x99\x2e\xd2\x24\x4b\x21\x4b\xbe\xcf\x52\x30\x96\x75\xa9\x0b\xc9\xda\x1a\x97\xd7\x76\x05\x27\x11\x00\xec\xc5\x73\xad\x60\x7a\x9d\x2c\x4e\xce\x2e\x62\x98\xdf\x65\x30\x7f\x9c\xcd\x60\x7a\x9d\x4e\x7f\xc2\xc9\x61\xe2\x97\x6f\x70\x7c\x1c\x0b\x98\x4c\x0e\x39\x04\x98\xae\x59\x22\x81\x2d\x81\x2b\x04\x2f\x86\x86\xa9\x17\xd0\xd5\x5a\x05\x59\xd6\x0d\x3a\x96\x4d\x0b\x57\x49\x96\x66\x37\xb7\xe9\x56\xf0\x2a\xfd\x91\x3c\xce\x32\x98\x3e\x2e\x16\xe9\x3c\xcb\x3d\xfa\x90\x25\xb7\xf7\xc2\x57\x4e\x26\xdb\x62\x01\x4a\x32\x82\x34\x2a\xc4\xbc\x60\x83\xce\xc9\x15\x82\xd2\xae\x95\x5c\x54\xda\xac\x82\xa0\x25\xbd\xd2\x06\x7e\x25\x8b\xa1\xc3\xd3\x38\xb0\xc1\x48\x39\xc0\x02\x8c\x1c\x68\xfc\xbb\x5d\xb7\x74\xbd\x63\x6c\x80\x2b\xc9\x50\x49\x07\x05\xa1\x64\x54\x01\xde\xed\x3a\x48\x94\x5d\x5d\xdf\x1d\xc8\x9c\x9f\xc7\x20\x02\x5a\x58\xc3\x68\x38\xeb\x5b\xdc\xc0\xe7\xa7\x6b\x94\xb0\x44\x42\x53\xa0\xb7\x76\x53\x7d\x11\x83\x18\xde\x47\x58\xae\x61\x01\x2d\xd9\x65\x8d\x0d\x68\x05\x95\x34\x0a\x15\xd8\x17\x24\x58\xf6\xe1\x5d\xb2\x66\x24\x6d\x56\xe0\x90\x5e\x74\x81\x5f\x07\xc3\x49\x1a\xd7\x5a\x62\xc8\xd2\xa7\x6c\xdb\xfb\xe7\x3f\x6f\xf8\xba\x58\x00\x6a\xae\x90\xe0\xc8\x35\xdc\x1e\x81\xa5\x7d\xc7\x0a\xd2\x2d\x8f\x0d\x15\xba\xd5\x68\xd8\xfd\xa7\x60\x68\x76\x5d\x2b\x7c\x13\x5a\xd6\xfa\x2f\x2a\x90\x44\xb2\x8f\x02\xbb\x63\x3f\xf7\x9d\x61\xbe\x5b\xd7\x21\x63\x67\x49\xdd\x9f\x5a\x33\x82\xb2\xe8\xcc\x31\x43\xad\x9f\x11\xd0\x74\x8d\x1b\x19\xbb\xe5\x6f\x2c\x46\x77\x42\x64\x69\x55\x3f\xfe\x1d\x36\xa8\x1b\x50\x4f\xf6\x5a\x49\x46\xef\x39\x12\x59\x02\xed\x80\x90\x3b\x32\x7e\x14\xa6\xee\xe1\xb5\x42\xf3\x1e\x8b\xe2\xcb\x68\x32\x89\xa2\xf1\x30\x6f\xe6\x57\xe9\x13\x68\xf5\x96\xef\x1f\xa7\x56\xd1\xdd\xfc\xa3\x83\x3d\xb8\xb3\xf8\xf2\x53\xaa\xcd\xa5\x84\x0e\x3e\x66\xdd\xe4\x78\x3e\x6f\x14\x4b\xee\x5c\x5e\x58\x85\x02\xfc\x98\xc7\x08\xf8\xc8\xb6\xcf\x71\xdb\x1e\x6e\xb3\xfb\xb0\x69\xfe\xde\x29\x84\xf0\x4d\xf3\x90\xbc\xbf\x16\x9e\xbb\xe1\x36\x0f\xbe\x38\x31\xfa\xb3\x3e\xd8\x0d\x71\x49\xb6\x39\xa4\x0e\xb5\x81\x25\x27\x74\xad\x35\x0e\x05\x94\x9a\x1c\xc3\xd9\xb3\x97\x71\xac\xfc\x7c\xfc\x97\xc0\xb1\x42\xa2\x7d\xed\x7f\x01\x00\x00\xff\xff\xd4\x6e\x08\xc8\x0b\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1291, mode: os.FileMode(436), modTime: time.Unix(1687539329, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
